// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.HTMLEditingDescriptor = (function() {

    function HTMLEditingDescriptor(element) {
      var tiny_mce_css_links,
        _this = this;
      this.initInstanceCallback = function(visualEditor) {
        return HTMLEditingDescriptor.prototype.initInstanceCallback.apply(_this, arguments);
      };
      this.saveCodeEditor = function(source) {
        return HTMLEditingDescriptor.prototype.saveCodeEditor.apply(_this, arguments);
      };
      this.showCodeEditor = function(source) {
        return HTMLEditingDescriptor.prototype.showCodeEditor.apply(_this, arguments);
      };
      this.saveLink = function(data) {
        return HTMLEditingDescriptor.prototype.saveLink.apply(_this, arguments);
      };
      this.editLink = function(data) {
        return HTMLEditingDescriptor.prototype.editLink.apply(_this, arguments);
      };
      this.saveImage = function(data) {
        return HTMLEditingDescriptor.prototype.saveImage.apply(_this, arguments);
      };
      this.editImage = function(data) {
        return HTMLEditingDescriptor.prototype.editImage.apply(_this, arguments);
      };
      this.setupTinyMCE = function(ed) {
        return HTMLEditingDescriptor.prototype.setupTinyMCE.apply(_this, arguments);
      };
      this.element = element;
      this.base_asset_url = this.element.find("#editor-tab").data('base-asset-url');
      this.editor_choice = this.element.find("#editor-tab").data('editor');
      if (this.base_asset_url === void 0) {
        this.base_asset_url = null;
      }
      this.advanced_editor = CodeMirror.fromTextArea($(".edit-box", this.element)[0], {
        mode: "text/html",
        lineNumbers: true,
        lineWrapping: true
      });
      if (this.editor_choice === 'visual') {
        this.$advancedEditorWrapper = $(this.advanced_editor.getWrapperElement());
        this.$advancedEditorWrapper.addClass('is-inactive');
        tiny_mce_css_links = [];
        $("link[rel=stylesheet][href*='tinymce']").filter("[href*='content']").each(function() {
          tiny_mce_css_links.push($(this).attr("href"));
        });
        tinyMCE.baseURL = "" + baseUrl + "/js/vendor/tinymce/js/tinymce";
        tinyMCE.suffix = ".min";
        this.tiny_mce_textarea = $(".tiny-mce", this.element).tinymce({
          script_url: "" + baseUrl + "/js/vendor/tinymce/js/tinymce/tinymce.full.min.js",
          theme: "modern",
          skin: 'studio-tmce4',
          schema: "html5",
          convert_urls: false,
          content_css: tiny_mce_css_links.join(", "),
          formats: {
            code: {
              inline: 'code'
            }
          },
          visual: false,
          plugins: "textcolor, link, image, codemirror",
          codemirror: {
            path: "" + baseUrl + "/js/vendor"
          },
          image_advtab: true,
          toolbar: "formatselect | fontselect | bold italic underline forecolor wrapAsCode | bullist numlist outdent indent blockquote | link unlink image | code",
          block_formats: "Paragraph=p;Preformatted=pre;Heading 1=h1;Heading 2=h2;Heading 3=h3",
          width: '100%',
          height: '400px',
          menubar: false,
          statusbar: false,
          valid_children: "+body[style]",
          valid_elements: "*[*]",
          extended_valid_elements: "*[*]",
          invalid_elements: "",
          setup: this.setupTinyMCE,
          init_instance_callback: this.initInstanceCallback
        });
      }
    }

    HTMLEditingDescriptor.prototype.setupTinyMCE = function(ed) {
      ed.addButton('wrapAsCode', {
        title: 'Code block',
        image: "" + baseUrl + "/images/ico-tinymce-code.png",
        onclick: function() {
          return ed.formatter.toggle('code');
        }
      });
      this.visualEditor = ed;
      ed.on('SaveImage', this.saveImage);
      ed.on('EditImage', this.editImage);
      ed.on('SaveLink', this.saveLink);
      ed.on('EditLink', this.editLink);
      ed.on('ShowCodeEditor', this.showCodeEditor);
      return ed.on('SaveCodeEditor', this.saveCodeEditor);
    };

    HTMLEditingDescriptor.prototype.editImage = function(data) {
      if (data['src']) {
        return data['src'] = rewriteStaticLinks(data['src'], this.base_asset_url, '/static/');
      }
    };

    HTMLEditingDescriptor.prototype.saveImage = function(data) {
      if (data['src']) {
        return data['src'] = rewriteStaticLinks(data['src'], '/static/', this.base_asset_url);
      }
    };

    HTMLEditingDescriptor.prototype.editLink = function(data) {
      if (data['href']) {
        return data['href'] = rewriteStaticLinks(data['href'], this.base_asset_url, '/static/');
      }
    };

    HTMLEditingDescriptor.prototype.saveLink = function(data) {
      if (data['href']) {
        return data['href'] = rewriteStaticLinks(data['href'], '/static/', this.base_asset_url);
      }
    };

    HTMLEditingDescriptor.prototype.showCodeEditor = function(source) {
      var content;
      content = rewriteStaticLinks(source.content, this.base_asset_url, '/static/');
      return source.content = content;
    };

    HTMLEditingDescriptor.prototype.saveCodeEditor = function(source) {
      var content;
      content = rewriteStaticLinks(source.content, '/static/', this.base_asset_url);
      return source.content = content;
    };

    HTMLEditingDescriptor.prototype.initInstanceCallback = function(visualEditor) {
      visualEditor.setContent(rewriteStaticLinks(visualEditor.getContent({
        no_events: 1
      }), '/static/', this.base_asset_url));
      this.starting_content = visualEditor.getContent({
        format: "raw",
        no_events: 1
      });
      return visualEditor.focus();
    };

    HTMLEditingDescriptor.prototype.getVisualEditor = function() {
      /*
      Returns the instance of TinyMCE.
      
      Pulled out as a helper method for unit test.
      */
      return this.visualEditor;
    };

    HTMLEditingDescriptor.prototype.save = function() {
      var raw_content, text, visualEditor;
      text = void 0;
      if (this.editor_choice === 'visual') {
        visualEditor = this.getVisualEditor();
        raw_content = visualEditor.getContent({
          format: "raw",
          no_events: 1
        });
        if (this.starting_content !== raw_content) {
          text = rewriteStaticLinks(visualEditor.getContent({
            no_events: 1
          }), this.base_asset_url, '/static/');
        }
      }
      if (text === void 0) {
        text = this.advanced_editor.getValue();
      }
      return {
        data: text
      };
    };

    return HTMLEditingDescriptor;

  })();

}).call(this);
