/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var planout = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"rules_list":4,"rule":5,"expression":6,"IDENTIFIER":7,"=":8,"simple_expression":9,"END_STATEMENT":10,"switch_expression":11,"if_expression":12,"[":13,"array":14,"]":15,"(":16,"arguments":17,")":18,"{":19,"}":20,"CONST":21,"%":22,"/":23,">":24,"<":25,"EQUALS":26,"NEQ":27,"LTE":28,"GTE":29,"+":30,"-":31,"*":32,"!":33,"OR":34,"AND":35,",":36,"arguments_list":37,"values_list":38,"SWITCH":39,"cases_list":40,"IF":41,"optional_else_expression":42,"ELSE":43,"case":44,"THEN":45,"$accept":0,"$end":1},
terminals_: {2:"error",7:"IDENTIFIER",8:"=",10:"END_STATEMENT",13:"[",15:"]",16:"(",18:")",19:"{",20:"}",21:"CONST",22:"%",23:"/",24:">",25:"<",26:"EQUALS",27:"NEQ",28:"LTE",29:"GTE",30:"+",31:"-",32:"*",33:"!",34:"OR",35:"AND",36:",",39:"SWITCH",41:"IF",43:"ELSE",45:"THEN"},
productions_: [0,[3,1],[4,0],[4,2],[5,1],[5,4],[6,1],[6,1],[9,1],[9,3],[9,4],[9,4],[9,6],[9,3],[9,3],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,3],[14,0],[14,1],[14,3],[17,0],[17,1],[17,1],[37,3],[37,5],[38,1],[38,3],[11,4],[12,6],[42,0],[42,2],[42,2],[40,0],[40,3],[44,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = {"op": "seq", "seq": $$[$0]}; console.log(JSON.stringify(this.$)); return this.$; 
break;
case 2: this.$ = []; 
break;
case 3: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = {"op": "set", "var": $$[$0-3], "value": $$[$0-1]}; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = {"op": "get", "var": $$[$0]}; 
break;
case 9: this.$ = {"op": "array", "values": $$[$0-1]}; 
break;
case 10: this.$ = $$[$0-1]; this.$["op"] = $$[$0-3]; 
break;
case 11: this.$ = {"op": "index", "base": {"op": "get", "var": $$[$0-3]}, "index": $$[$0-1]}; 
break;
case 12: this.$ = {"op": "index", "base": {"op": "array", "values": $$[$0-4]}, "index": $$[$0-1]}; 
break;
case 13: this.$ = {"op": "seq", "seq": $$[$0-1]}; 
break;
case 14: this.$ = $$[$0-1]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = {"op": "%", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 17: this.$ = {"op": "/", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 18: this.$ = {"op": ">", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 19: this.$ = {"op": "<", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 20: this.$ = {"op": "equals", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 21: this.$ = {"op": "not", "value": {"op": "equals", "left": $$[$0-2], "right": $$[$0]}}; 
break;
case 22: this.$ = {"op": "<=", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 23: this.$ = {"op": ">=", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 24: this.$ = {"op": "sum", "values": [$$[$0-2], $$[$0]]}; 
break;
case 25: this.$ = {"op": "sum", "values": [$$[$0-2], {"op": "negative", "value": $$[$0]}]}; 
break;
case 26: this.$ = {"op": "product", "values": [$$[$0-2], $$[$0]]}; 
break;
case 27: this.$ = {"op": "negative", "value": $$[$0]}; 
break;
case 28: this.$ = {"op": "not", "value": $$[$0]}; 
break;
case 29: this.$ = {"op": "or", "values": [$$[$0-2], $$[$0]]}; 
break;
case 30: this.$ = {"op": "and", "values": [$$[$0-2], $$[$0]]}; 
break;
case 31: this.$ = []; 
break;
case 32: this.$ = [$$[$0]]; 
break;
case 33: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 34: this.$ = {}; 
break;
case 35: this.$ = $$[$0]; 
break;
case 36: this.$ = $$[$0]; 
break;
case 37: this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 38: this.$ = $$[$0-4]; this.$[$$[$0-2]] = $$[$0]; 
break;
case 39: this.$ = {}; this.$["values"] = [$$[$0]]; 
break;
case 40: this.$ = $$[$0-2]; this.$["values"].push($$[$0]); 
break;
case 41: this.$ = {"op": "switch", "cases": $$[$0-1]}; 
break;
case 42: this.$ = {"op": "cond", "cond": [{"if": $$[$0-3], "then": $$[$0-1]}]};
      if ($$[$0]["cond"]) {
        this.$["cond"] = this.$["cond"].concat($$[$0]["cond"]);
      }
    
break;
case 43: this.$ = {}; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = {"op": "cond", "cond": [{"if": true, "then": $$[$0]}]}; 
break;
case 46: this.$ = []; 
break;
case 47: this.$ = $$[$0-2]; this.$.push($$[$0-1]); 
break;
case 48: this.$ = {"op": "case", "condidion": $$[$0-2], "result": $$[$0]}; 
break;
}
},
table: [{1:[2,2],3:1,4:2,7:[2,2],39:[2,2],41:[2,2]},{1:[3]},{1:[2,1],5:3,6:4,7:[1,5],11:6,12:7,39:[1,8],41:[1,9]},{1:[2,3],7:[2,3],20:[2,3],39:[2,3],41:[2,3]},{1:[2,4],7:[2,4],20:[2,4],39:[2,4],41:[2,4]},{8:[1,10]},{1:[2,6],7:[2,6],10:[2,6],20:[2,6],39:[2,6],41:[2,6]},{1:[2,7],7:[2,7],10:[2,7],20:[2,7],39:[2,7],41:[2,7]},{19:[1,11]},{16:[1,12]},{7:[1,14],9:13,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[2,46],13:[2,46],16:[2,46],19:[2,46],20:[2,46],21:[2,46],31:[2,46],33:[2,46],40:21},{7:[1,14],9:22,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{10:[1,23],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36]},{1:[2,8],7:[2,8],10:[2,8],13:[1,38],15:[2,8],16:[1,37],18:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],35:[2,8],36:[2,8],39:[2,8],41:[2,8],43:[2,8],45:[2,8]},{7:[1,14],9:40,13:[1,15],14:39,15:[2,31],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20],36:[2,31]},{4:41,7:[2,2],20:[2,2],39:[2,2],41:[2,2]},{7:[1,14],9:42,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{1:[2,15],7:[2,15],10:[2,15],15:[2,15],18:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],34:[2,15],35:[2,15],36:[2,15],39:[2,15],41:[2,15],43:[2,15],45:[2,15]},{7:[1,14],9:43,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:44,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:47,13:[1,15],16:[1,17],19:[1,16],20:[1,45],21:[1,18],31:[1,19],33:[1,20],44:46},{18:[1,48],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36]},{1:[2,5],7:[2,5],20:[2,5],39:[2,5],41:[2,5]},{7:[1,14],9:49,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:50,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:51,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:52,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:53,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:54,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:55,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:56,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:57,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:58,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:59,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:60,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:61,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,65],9:66,13:[1,15],16:[1,17],17:62,18:[2,34],19:[1,16],21:[1,18],31:[1,19],33:[1,20],37:63,38:64},{7:[1,14],9:67,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{15:[1,68],36:[1,69]},{15:[2,32],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,32]},{5:3,6:4,7:[1,5],11:6,12:7,20:[1,70],39:[1,8],41:[1,9]},{18:[1,71],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36]},{1:[2,27],7:[2,27],10:[2,27],15:[2,27],18:[2,27],20:[2,27],22:[1,24],23:[1,25],24:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[1,34],34:[2,27],35:[2,27],36:[2,27],39:[2,27],41:[2,27],43:[2,27],45:[2,27]},{1:[2,28],7:[2,28],10:[2,28],15:[2,28],18:[2,28],20:[2,28],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,28],39:[2,28],41:[2,28],43:[2,28],45:[2,28]},{1:[2,41],7:[2,41],10:[2,41],20:[2,41],39:[2,41],41:[2,41]},{10:[1,72]},{22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],45:[1,73]},{7:[1,14],9:74,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{1:[2,16],7:[2,16],10:[2,16],15:[2,16],18:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],34:[2,16],35:[2,16],36:[2,16],39:[2,16],41:[2,16],43:[2,16],45:[2,16]},{1:[2,17],7:[2,17],10:[2,17],15:[2,17],18:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],34:[2,17],35:[2,17],36:[2,17],39:[2,17],41:[2,17],43:[2,17],45:[2,17]},{1:[2,18],7:[2,18],10:[2,18],15:[2,18],18:[2,18],20:[2,18],22:[1,24],23:[1,25],24:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[1,32],31:[1,33],32:[1,34],34:[2,18],35:[2,18],36:[2,18],39:[2,18],41:[2,18],43:[2,18],45:[2,18]},{1:[2,19],7:[2,19],10:[2,19],15:[2,19],18:[2,19],20:[2,19],22:[1,24],23:[1,25],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[1,32],31:[1,33],32:[1,34],34:[2,19],35:[2,19],36:[2,19],39:[2,19],41:[2,19],43:[2,19],45:[2,19]},{1:[2,20],7:[2,20],10:[2,20],15:[2,20],18:[2,20],20:[2,20],22:[1,24],23:[1,25],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[1,32],31:[1,33],32:[1,34],34:[2,20],35:[2,20],36:[2,20],39:[2,20],41:[2,20],43:[2,20],45:[2,20]},{1:[2,21],7:[2,21],10:[2,21],15:[2,21],18:[2,21],20:[2,21],22:[1,24],23:[1,25],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[1,32],31:[1,33],32:[1,34],34:[2,21],35:[2,21],36:[2,21],39:[2,21],41:[2,21],43:[2,21],45:[2,21]},{1:[2,22],7:[2,22],10:[2,22],15:[2,22],18:[2,22],20:[2,22],22:[1,24],23:[1,25],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[1,32],31:[1,33],32:[1,34],34:[2,22],35:[2,22],36:[2,22],39:[2,22],41:[2,22],43:[2,22],45:[2,22]},{1:[2,23],7:[2,23],10:[2,23],15:[2,23],18:[2,23],20:[2,23],22:[1,24],23:[1,25],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[1,32],31:[1,33],32:[1,34],34:[2,23],35:[2,23],36:[2,23],39:[2,23],41:[2,23],43:[2,23],45:[2,23]},{1:[2,24],7:[2,24],10:[2,24],15:[2,24],18:[2,24],20:[2,24],22:[1,24],23:[1,25],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[1,34],34:[2,24],35:[2,24],36:[2,24],39:[2,24],41:[2,24],43:[2,24],45:[2,24]},{1:[2,25],7:[2,25],10:[2,25],15:[2,25],18:[2,25],20:[2,25],22:[1,24],23:[1,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[1,34],34:[2,25],35:[2,25],36:[2,25],39:[2,25],41:[2,25],43:[2,25],45:[2,25]},{1:[2,26],7:[2,26],10:[2,26],15:[2,26],18:[2,26],20:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],34:[2,26],35:[2,26],36:[2,26],39:[2,26],41:[2,26],43:[2,26],45:[2,26]},{1:[2,29],7:[2,29],10:[2,29],15:[2,29],18:[2,29],20:[2,29],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[2,29],35:[2,29],36:[2,29],39:[2,29],41:[2,29],43:[2,29],45:[2,29]},{1:[2,30],7:[2,30],10:[2,30],15:[2,30],18:[2,30],20:[2,30],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[2,30],35:[2,30],36:[2,30],39:[2,30],41:[2,30],43:[2,30],45:[2,30]},{18:[1,75]},{18:[2,35],36:[1,76]},{18:[2,36],36:[1,77]},{8:[1,78],13:[1,38],16:[1,37],18:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],34:[2,8],35:[2,8],36:[2,8]},{18:[2,39],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,39]},{15:[1,79],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36]},{1:[2,9],7:[2,9],10:[2,9],13:[1,80],15:[2,9],18:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],34:[2,9],35:[2,9],36:[2,9],39:[2,9],41:[2,9],43:[2,9],45:[2,9]},{7:[1,14],9:81,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{1:[2,13],7:[2,13],10:[2,13],15:[2,13],18:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],34:[2,13],35:[2,13],36:[2,13],39:[2,13],41:[2,13],43:[2,13],45:[2,13]},{1:[2,14],7:[2,14],10:[2,14],15:[2,14],18:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],34:[2,14],35:[2,14],36:[2,14],39:[2,14],41:[2,14],43:[2,14],45:[2,14]},{7:[2,47],13:[2,47],16:[2,47],19:[2,47],20:[2,47],21:[2,47],31:[2,47],33:[2,47]},{6:82,11:6,12:7,39:[1,8],41:[1,9]},{1:[2,43],7:[2,43],10:[2,43],20:[2,43],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],39:[2,43],41:[2,43],42:83,43:[1,84]},{1:[2,10],7:[2,10],10:[2,10],15:[2,10],18:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],34:[2,10],35:[2,10],36:[2,10],39:[2,10],41:[2,10],43:[2,10],45:[2,10]},{7:[1,85]},{7:[1,14],9:86,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{7:[1,14],9:87,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{1:[2,11],7:[2,11],10:[2,11],15:[2,11],18:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],34:[2,11],35:[2,11],36:[2,11],39:[2,11],41:[2,11],43:[2,11],45:[2,11]},{7:[1,14],9:88,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{15:[2,33],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,33]},{10:[2,48]},{1:[2,42],7:[2,42],10:[2,42],20:[2,42],39:[2,42],41:[2,42]},{7:[1,14],9:90,12:89,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20],41:[1,9]},{8:[1,91]},{18:[2,40],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,40]},{18:[2,37],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,37]},{15:[1,92],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36]},{1:[2,44],7:[2,44],10:[2,44],20:[2,44],39:[2,44],41:[2,44]},{1:[2,45],7:[2,45],10:[2,45],20:[2,45],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],39:[2,45],41:[2,45]},{7:[1,14],9:93,13:[1,15],16:[1,17],19:[1,16],21:[1,18],31:[1,19],33:[1,20]},{1:[2,12],7:[2,12],10:[2,12],15:[2,12],18:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],34:[2,12],35:[2,12],36:[2,12],39:[2,12],41:[2,12],43:[2,12],45:[2,12]},{18:[2,38],22:[1,24],23:[1,25],24:[1,26],25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],34:[1,35],35:[1,36],36:[2,38]}],
defaultActions: {82:[2,48]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip whitespace */
break;
case 2:return 39;
break;
case 3:return 41;
break;
case 4:return 43;
break;
case 5:return 7
break;
case 6: yy_.yytext = Number(yy_.yytext); return 21; 
break;
case 7: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 21; 
break;
case 8: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 21; 
break;
case 9:return 34
break;
case 10:return 35
break;
case 11:return 26
break;
case 12:return 29
break;
case 13:return 28
break;
case 14:return 27
break;
case 15:return 45
break;
case 16:return 10
break;
case 17:return yy_.yytext
break;
}
},
rules: [/^(?:#(.)*\n)/,/^(?:\s+)/,/^(?:switch\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)/,/^(?:"(\\.|[^\\"])*")/,/^(?:'[^\']*')/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:=>)/,/^(?:;)/,/^(?:=|:|\[|\]|\(|\)|,|\{|\}|\+|%|\*|-|\/|%|>|<|!)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = planout;
exports.Parser = planout.Parser;
exports.parse = function () { return planout.parse.apply(planout, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}